version: 2.1

defaults:
  environment: &environment
    DOCKER_REGISTRY: docker.io
    DOCKER_USER: kelvintaywl
    DOCKER_LOGIN: kelvintaywl

executors:
  docker-basic:
    docker:
      - image: cimg/base:current
    resource_class: medium

commands:
  login-docker-registry:
    description: log in to the Docker image registry
    steps:
      - run:
          name: Login to Docker image registry
          command: |
            # login credentials should be provided via context or project environment variables.
            echo $DOCKER_PASSWORD | docker login $DOCKER_REGISTRY --username $DOCKER_LOGIN --password-stdin
  setup-buildx:
    description: set up context and builder instances for Docker Buildx
    steps:
      - run:
          name: Check Docker settings (for buildx)
          command: |
            docker buildx version
      - run:
          name: Set up Docker Buildx context
          command: |
            docker context create circleci
      - run:
          name: Set up Docker builder instance
          command: |
            docker buildx create --use circleci
      - run:
          name: Inspect setup
          command: |
            docker buildx ls
            docker context inspect circleci

jobs:
  push:
    environment:
      <<: *environment
    parameters:
      repo:
        type: string
        description: Docker image name to tag
      tag:
        type: string
        description: Docker image tag to tag
      build-context:
        type: string
        description: Docker image build context
        default: "."
      dockerfile:
        type: string
        description: location of Dockerfile
        default: Dockerfile
      cache-type:
        type: enum
        enum:
          - inline
          - registry
          - local
      cache-mode:
        type: enum
        enum:
          - min
          - max
        default: max
      # cache-from:
      #   type: string
      #   description: |
      #     argument for cache-to option for Docker Buildx.
      #     See https://docs.docker.com/engine/reference/commandline/buildx_build/#cache-from
      #   default: ""
      # cache-to:
      #   type: string
      #   description: |
      #     argument for cache-to option for Docker Buildx.
      #     See https://docs.docker.com/engine/reference/commandline/buildx_build/#cache-to
        # default: ""
      local-cache-path:
        type: string
        description: path for Buildx local cache storage (applicable only when using local cache)
        default: "/tmp/dockercache"
      registry-cache-tag:
        type: string
        description: image tag used for Buildx registry cache storage (applicable only when using registry cache)
        # See https://hub.docker.com/repository/docker/kelvintaywlcircleci/hello-buildx-registry-cache
        default: ''
    executor: docker-basic
    steps:
      
      - setup_remote_docker:
          docker_layer_caching: false
          version: "20.10.17"
      - checkout
      - setup-buildx
      - login-docker-registry
      - when:
          condition:
            and:
              - << parameters.local-cache-path >>
              - equal: [ local, << parameters.cache-type >> ]
          steps:
            - restore_cache:
                keys:
                  - buildx-{{ arch }}-{{ .Branch }}-
                  - buildx-{{ arch }}-
      - when:
          condition:
            equal: [ inline, << parameters.cache-type >> ]
          steps:
            - run:
                name: Set up --cache-from and --cache-to
                command: |
                  CACHE_FROM="type=registry,ref=${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.repo >>:<< parameters.tag >>"
                  echo "export DOCKER_BUILDX_CACHE_FROM='${CACHE_FROM}'" >> $BASH_ENV

                  CACHE_TO="inline"
                  echo "export DOCKER_BUILDX_CACHE_TO='${CACHE_TO}'" >> $BASH_ENV
      - when:
          condition:
            equal: [ local, << parameters.cache-type >> ]
          steps:
            - run:
                name: Set up --cache-from and --cache-to
                command: |
                  CACHE_FROM="type=local,src=<< parameters.local-cache-path >>"
                  echo "export DOCKER_BUILDX_CACHE_FROM='${CACHE_FROM}'" >> $BASH_ENV

                  CACHE_TO="type=local,mode=<< parameters.cache-mode >>,dest=<< parameters.local-cache-path >>"
                  echo "export DOCKER_BUILDX_CACHE_TO='${CACHE_TO}'" >> $BASH_ENV
      - when:
          condition:
            equal: [ registry, << parameters.cache-type >> ]
          steps:
            - run:
                name: Set up --cache-from and --cache-to
                command: |
                  CACHE_FROM="type=registry,ref=${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.repo >>:<< parameters.registry-cache-tag >>"
                  echo "export DOCKER_BUILDX_CACHE_FROM='${CACHE_FROM}'" >> $BASH_ENV

                  CACHE_TO="type=registry,mode=<< parameters.cache-mode >>,ref=${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.repo >>:<< parameters.registry-cache-tag >>"
                  echo "export DOCKER_BUILDX_CACHE_TO='${CACHE_TO}'" >> $BASH_ENV
      - run:
          name: Build image via Docker Buildx
          command: |
            docker buildx build --progress=plain \
              --tag="${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.repo >>:<< parameters.tag >>" \
              --cache-from="${DOCKER_BUILDX_CACHE_FROM}" \
              --cache-to="${DOCKER_BUILDX_CACHE_TO}" \
              --output=type=docker \
              << parameters.build-context >>
      - when:
          condition:
            and:
              - << parameters.local-cache-path >>
              - equal: [ local, << parameters.cache-type >> ]
          steps:
            - save_cache:
                key: buildx-{{ arch }}-{{ .Branch }}-{{ checksum "<< parameters.local-cache-path >>/index.json" }}
                paths:
                  - << parameters.local-cache-path >>
      - run:
          name: Inspect built image(s)
          command: |
            docker image ls
      - run:
          name: Publish image
          command: |
            docker image push "${DOCKER_REGISTRY}/${DOCKER_USER}/<< parameters.repo >>:<< parameters.tag >>"

workflows:
  buildx:
    jobs:
      - push:
          name: snyk-node-via-inline-cache
          repo: snyk-node
          tag: latest
          dockerfile: Dockerfile
          build-context: "."
          cache-type: inline
          # NOTE: inline cache will not save intermediate stages;
          # We cannot set mode=max when using inline cache strategy
          cache-mode: min
      - push:
          name: snyk-node-multistage-via-registry-cache
          repo: snyk-node-multistage
          tag: registry-cache-${CIRCLE_SHA1:0:7}
          dockerfile: Dockerfile.multistage
          build-context: "."
          cache-type: registry
          cache-mode: max
          registry-cache-tag: cache
      - push:
          name: snyk-node-multistage-via-local-cache
          repo: snyk-node-multistage
          tag: local-cache-${CIRCLE_SHA1:0:7}
          dockerfile: Dockerfile.multistage
          build-context: "."
          cache-type: local
          cache-mode: max
          local-cache-path:
